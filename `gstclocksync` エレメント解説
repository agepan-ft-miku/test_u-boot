## GStreamer `gstclocksync` エレメント解説

GStreamer の `gstclocksync` エレメントは、パイプラインを流れるバッファやバッファリストを、その内容を変更することなく、パイプラインクロックに同期させてから下流に渡すシンプルなエレメントです。これにより、マルチメディアの再生や処理において、データが正しいタイミングで処理されることを保証します。

### コア機能

* **同期**: `gstclocksync` の主な目的は、入力される GStreamer のバッファ（およびバッファリスト）をパイプラインのクロックに同期させることです。
* **パススルー**: バッファやバッファリストの内容は変更せず、タイミングのみを調整してそのまま渡します。
* **`sync` プロパティ**: 同期機能はデフォルトで有効になっていますが、`sync` プロパティを `FALSE` に設定することで無効にできます。

### 主要なプロパティと特徴

* **`ts-offset` (タイムスタンプオフセット)**:
    * 同期ポイントを手動で調整できます。
    * 正の値を設定すると同期が遅延され、負の値を設定するとより早いタイミングでの同期が試みられます。
    * デフォルト値は `0` です。
* **`sync-to-first`**:
    * GStreamer 1.20 で導入されました。
    * 有効にすると、最初のバッファのタイムスタンプとパイプラインの実行時間に基づいて `ts-offset` が自動的に調整されます。
    * これにより、最初のバッファがクロック待機なしで即座に出力されるようになります。これは、バッファのタイムスタンプがパイプラインの絶対実行時間と厳密に一致する必要はないが、`clocksync` を通過する処理の *期間* をクロック時間と同期させる必要がある場合に便利です。
    * この自動調整は、フラッシュイベント後、または READY から PAUSED への状態変化後の最初のバッファで行われます。
* **`qos` (Quality-of-Service)**:
    * GStreamer 1.22 で導入されました。
    * 有効にすると（デフォルトは `FALSE`）、`gstclocksync` は Quality-of-Service (QoS) イベントを上流に生成します。
    * QoS イベントは、クロックに対してデータが遅れて到着しているか（アンダーフロー）、早く到着しすぎているか（オーバーフロー）といった同期状態を上流エレメントに通知します。
    * ジッター（期待される到着時間からのずれ）と処理レートを計算して QoS メッセージを決定します。
    * 処理時間やバッファ間の到着差分の計測には移動平均を使用し、値を平滑化します。

### 同期の仕組み (`gst_clocksync_do_sync` 関数)

1.  **チェック**: まず、同期が有効か (`sync` プロパティ)、バッファが有効な実行時間を持ち、セグメントフォーマットが `GST_FORMAT_TIME` であるかを確認します。
2.  **タイムスタンプ計算**:
    * バッファの実行時間、エレメントのベースタイム、および上流のレイテンシ (`upstream_latency`) を加算してターゲットタイムスタンプを計算します。
    * 次に `ts-offset` がこのターゲットタイムスタンプに適用されます。負のオフセットはターゲット時刻が早くなることを意味し、正のオフセットは遅くなることを意味します。
3.  **クロック待機**:
    * パイプラインクロック (`GST_ELEMENT(clocksync)->clock`) を取得します。
    * 計算されたターゲットタイムスタンプまで待機するためのシングルショットの `GstClockID` を作成します。
    * `gst_clock_id_wait()` 関数は、クロックがターゲット時刻に達するか、スケジュール解除される（例：フラッシュや状態変化による）までブロックします。
    * 実際の起床時刻とスケジュールされた時刻の差は `jitter` として報告されます。
4.  **フラッシング**: 待機中にフラッシュイベントが発生すると、待機は中断され `GST_FLOW_FLUSHING` が返されます。
5.  **QoS 計測 (同期後)**: 同期が成功した後（または同期が無効の場合）、QoS が有効であれば `gst_clock_sync_perform_qos` を呼び出し、タイミングを分析して QoS イベントを送信する可能性があります。

### 状態管理とイベント処理

* **状態変化**:
    * `READY_TO_PAUSED`: `flushing` を `FALSE` に、`blocked` を `TRUE` に設定します。`sync` が有効な場合、`GST_STATE_CHANGE_NO_PREROLL` を示すことがあります。`sync-to-first` のための `is_first` をリセットします。
    * `PAUSED_TO_PLAYING`: `blocked` を `FALSE` に設定し、待機中の同期処理に進むよう通知します。
    * `PAUSED_TO_READY`: `flushing` を `TRUE` に設定し、保留中のクロック待機をスケジュール解除し、`blocked` を `FALSE` に設定して通知します。
    * `PLAYING_TO_PAUSED`: `upstream_latency` をリセットし、`blocked` を `TRUE` に設定します。`sync` が有効な場合、`GST_STATE_CHANGE_NO_PREROLL` を示すことがあります。QoS 統計をリセットします。
* **イベント処理**:
    * `GST_EVENT_SEGMENT`: バッファタイムスタンプを実行時間に変換するためにセグメント情報を保存します。QoS 統計をリセットします。
    * `GST_EVENT_GAP`: 有効な開始時刻を持つギャップイベントを受信した場合、その開始時刻に同期しようとします。
    * `GST_EVENT_FLUSH_START`: `flushing` を `TRUE` に設定し、ブロックされている条件に通知し、アクティブなクロック待機をスケジュール解除します。
    * `GST_EVENT_FLUSH_STOP`: `flushing` を `FALSE` に設定し、セグメントを再初期化し、QoS をリセットし、`is_first` を `TRUE` に設定します。
    * `GST_EVENT_QOS` (srcpad 上): `clocksync` 自身の QoS が有効な場合、QoS 管理を担当するため、下流の QoS イベントを破棄します。
* **レイテンシクエリ (`GST_QUERY_LATENCY`)**:
    * 下流のレイテンシを照会し、独自の考慮事項を追加します。
    * 上流がライブの場合、`upstream_latency` を記録します。
    * 上流がライブであるか、`sync` が有効な場合、`live` を `TRUE` として報告します。

### クロック提供

* `sync` が `TRUE` の場合、エレメントは `GST_ELEMENT_FLAG_PROVIDE_CLOCK` と `GST_ELEMENT_FLAG_REQUIRE_CLOCK` を設定します。
* `gst_clocksync_provide_clock` 関数は、同期が有効な場合にシステムクロック (`gst_system_clock_obtain()`) を返します。

**要約すると、`gstclocksync` は、バッファの提示時間をパイプラインクロックに合わせることで、GStreamer パイプライン内のデータフローのタイミングを正確に制御するユーティリティエレメントです。タイムスタンプオフセットによる詳細な制御を提供し、初期遅延を自動的に調整することもできます。さらに、その QoS メカニズムは、上流エレメントにフィードバックを提供することで、ストリーミングの問題の診断と潜在的な緩和に役立ちます。**
